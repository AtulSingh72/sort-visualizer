{"version":3,"sources":["logo.svg","serviceWorker.js","Algorithms/BubbleSort.js","Algorithms/SelectionSort.js","Algorithms/InsertionSort.js","Algorithms/MergeSort.js","Algorithms/QuickSort.js","Algorithms/HeapSort.js","SortVisualizer/SortVisualizer.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","getBubbleSortAnimation","newArray","animations","array","slice","n","length","i","j","push","swap","bubbleSort","array1","array2","isEqual","sort","a","b","console","log","temp","getSelectionSortAnimation","min_index","SelectionSort","getInsertionSortAnimation","key","insertionSort","getMergeSortAnimations","mergeSort","start","end","mid","Math","floor","sortArray","merge","getQuickSortAnimation","quickSort","pi","low","high","pivot","partition","getHeapSortAnimations","heapify","heapSort","largest","l","r","SortVisualizer","state","generateArray","randomIntFromInterval","setState","isColorChange","arrayBars","document","getElementsByClassName","color","barone","bartwo","baroneStyle","style","bartwoStyle","setTimeout","backgroundColor","barindex","newHeight","barStyle","height","toString","concat","selectionSort","c","barIndex","this","min","max","random","className","textAlign","margin","map","value","idx","onClick","Component","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.024819cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export function getBubbleSortAnimation(newArray) {\r\n    let animations = [];\r\n    let array = newArray.slice();\r\n    bubbleSort(array, animations);\r\n    const JSSortedArray = array.slice().sort((a, b) => a - b); // Sorting array using predifined method to check if our array is actually sorted or not\r\n    if (isEqual(JSSortedArray, array)) {\r\n        console.log(\"Bubble Sort works correctly\");\r\n    } else {\r\n        console.log(\"Bubble Sort not working\");\r\n    }\r\n    newArray = array;\r\n    return [animations, newArray];\r\n}\r\n\r\n// Bubble Sort algorithm\r\nfunction bubbleSort(array, animations) {\r\n    const n = array.length;\r\n    for (let i = 0; i < n - 1; i++) {\r\n        for (let j = 0; j < n - i - 1; j++) {\r\n            animations.push([j, j + 1]);\r\n            animations.push([j, j + 1]);\r\n            if (array[j] > array[j + 1]) {\r\n                animations.push([j, array[j + 1]]);\r\n                animations.push([j + 1, array[j]]);\r\n                swap(array, j, j + 1);\r\n            } else {\r\n                animations.push([-1, -1]);\r\n                animations.push([-1, -1]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction swap(array, i, j) {\r\n    let temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n}\r\n\r\nfunction isEqual(array1, array2) {\r\n    if (array1.length != array2.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < array1.length; i++) {\r\n        if (array1[i] != array2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n","export function getSelectionSortAnimation(newArray) {\r\n    let animations = [];\r\n    let array = newArray.slice();\r\n    SelectionSort(array, animations);\r\n    const JSSortedArray = array.slice().sort((a, b) => a - b); // Sorting array using predifined method to check if our array is actually sorted or not\r\n    if (isEqual(JSSortedArray, array)) {\r\n        console.log(\"Selection Sort works correctly\");\r\n    } else {\r\n        console.log(\"Selection Sort not working\");\r\n    }\r\n    newArray = array;\r\n    return [animations, newArray];\r\n}\r\n\r\nfunction SelectionSort(array, animations) {\r\n    const n = array.length;\r\n    for (let i = 0; i < n - 1; i++) {\r\n        let min_index = i;\r\n        for (let j = i + 1; j < n; j++) {\r\n            if (array[j] < array[min_index]) {\r\n                min_index = j;\r\n            }\r\n            animations.push([0, j, min_index]);\r\n            animations.push([0, j, min_index]);\r\n        }\r\n        animations.push([1, i, array[min_index]]);\r\n        animations.push([1, min_index, array[i]]);\r\n        swap(array, i, min_index);\r\n    }\r\n}\r\n\r\nfunction swap(array, i, j) {\r\n    let temp = array[i];\r\n    array[i] = array[j];\r\n    array[j] = temp;\r\n}\r\n\r\nfunction isEqual(array1, array2) {\r\n    if (array2.length != array1.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0; i < array1.length; i++) {\r\n        if (array1[i] != array2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n","export function getInsertionSortAnimation(newArray) {\r\n    let animations = [];\r\n    let array = newArray;\r\n    insertionSort(array, animations);\r\n    const JSSortedArray = array.slice().sort((a, b) => a - b); // Sorting array using predifined method to check if our array is actually sorted or not\r\n    if (isEqual(JSSortedArray, array)) {\r\n        console.log(\"Selection Sort works correctly\");\r\n    } else {\r\n        console.log(\"Selection Sort not working\");\r\n    }\r\n    newArray = array;\r\n    return [animations, newArray];\r\n}\r\n\r\nfunction insertionSort(array, animations) {\r\n    const n = array.length;\r\n    for (let i = 1; i < n; i++) {\r\n        let key = array[i];\r\n        let j = i - 1;\r\n        while (j >= 0 && array[j] > key) {\r\n            animations.push([0, i, j]);\r\n            animations.push([1, j + 1, array[j]]);\r\n            array[j + 1] = array[j];\r\n            animations.push([0, i, j]);\r\n            j = j - 1;\r\n        }\r\n        animations.push([1, j + 1, key]);\r\n        array[j + 1] = key;\r\n    }\r\n}\r\n\r\nfunction isEqual(array1, array2) {\r\n    if (array2.length != array1.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0; i < array1.length; i++) {\r\n        if (array1[i] != array2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n","export function getMergeSortAnimations(newArray) {\r\n    let animations = [];\r\n    let array = newArray;\r\n    mergeSort(array, animations, 0, array.length - 1);\r\n    const JSSortedArray = array.slice().sort((a, b) => a - b); // Sorting array using predifined method to check if our array is actually sorted or not\r\n    if (isEqual(JSSortedArray, array)) {\r\n        console.log(\"Merge Sort works correctly\");\r\n    } else {\r\n        console.log(\"Merge Sort not working\");\r\n    }\r\n    newArray = array;\r\n    return [animations, newArray];\r\n}\r\n\r\nfunction mergeSort(array, animations, start, end) {\r\n    if (start == end) {\r\n        return;\r\n    }\r\n    const mid = Math.floor((start + end) / 2);\r\n    mergeSort(array, animations, start, mid);\r\n    mergeSort(array, animations, mid + 1, end);\r\n    merge(array, start, end, mid, animations);\r\n}\r\n\r\nfunction merge(array, start, end, mid, animations) {\r\n    let sortArray = [];\r\n    let i = start;\r\n    let j = mid + 1;\r\n    while (i <= mid && j <= end) {\r\n        animations.push([i, j]);\r\n        animations.push([i, j]);\r\n        if (array[i] < array[j]) {\r\n            animations.push([sortArray.length + start, array[i]]);\r\n            sortArray.push(array[i++]);\r\n        } else {\r\n            animations.push([sortArray.length + start, array[j]]);\r\n            sortArray.push(array[j++]);\r\n        }\r\n    }\r\n    while (i <= mid) {\r\n        animations.push([i, i]);\r\n        animations.push([i, i]);\r\n        animations.push([sortArray.length + start, array[i]]);\r\n        sortArray.push(array[i++]);\r\n    }\r\n    while (j <= end) {\r\n        animations.push([j, j]);\r\n        animations.push([j, j]);\r\n        animations.push([sortArray.length + start, array[j]]);\r\n        sortArray.push(array[j++]);\r\n    }\r\n    for (let i = start; i <= end; i++) {\r\n        array[i] = sortArray[i - start];\r\n    }\r\n}\r\n\r\nfunction isEqual(array1, array2) {\r\n    if (array2.length != array1.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0; i < array1.length; i++) {\r\n        if (array1[i] != array2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n","export function getQuickSortAnimation(newArray) {\r\n    let animations = [];\r\n    let array = newArray;\r\n    quickSort(array, animations, 0, array.length - 1);\r\n    const JSSortedArray = array.slice().sort((a, b) => a - b); // Sorting array using predifined method to check if our array is actually sorted or not\r\n    if (isEqual(JSSortedArray, array)) {\r\n        console.log(\"Quick Sort works correctly\");\r\n    } else {\r\n        console.log(\"Quick Sort not working\");\r\n    }\r\n    newArray = array;\r\n    return [animations, newArray];\r\n}\r\n\r\nfunction quickSort(array, animations, start, end) {\r\n    if (start >= end) {\r\n        return;\r\n    }\r\n    let pi = partition(array, animations, start, end);\r\n    quickSort(array, animations, start, pi - 1);\r\n    quickSort(array, animations, pi + 1, end);\r\n}\r\n\r\nfunction partition(array, animations, low, high) {\r\n    let pivot = array[high];\r\n    let i = low;\r\n    for (let j = low; j < high; j++) {\r\n        animations.push([0, i, high]);\r\n        animations.push([0, i, high]);\r\n        if (array[j] <= pivot) {\r\n            animations.push([1, i, array[j]]);\r\n            animations.push([1, j, array[i]]);\r\n            let temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n            i++;\r\n        }\r\n    }\r\n\r\n    animations.push([1, i, array[high]]);\r\n    animations.push([1, high, array[i]]);\r\n    let temp = array[i];\r\n    array[i] = array[high];\r\n    array[high] = temp;\r\n\r\n    return i;\r\n}\r\n\r\nfunction isEqual(array1, array2) {\r\n    if (array2.length != array1.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0; i < array1.length; i++) {\r\n        if (array1[i] != array2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n","export function getHeapSortAnimations(newArray) {\r\n    let animations = [];\r\n    let array = newArray;\r\n    heapSort(array, animations);\r\n    const JSSortedArray = array.slice().sort((a, b) => a - b); // Sorting array using predifined method to check if our array is actually sorted or not\r\n    if (isEqual(JSSortedArray, array)) {\r\n        console.log(\"Heap Sort works correctly\");\r\n    } else {\r\n        console.log(\"Heap Sort not working\");\r\n    }\r\n    newArray = array;\r\n    return [animations, newArray];\r\n}\r\n\r\nfunction heapSort(array, animations) {\r\n    const n = array.length;\r\n\r\n    // Build max heap\r\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\r\n        heapify(array, animations, n, i);\r\n    }\r\n\r\n    for (let i = n - 1; i >= 0; i--) {\r\n        animations.push([0, 0, i]);\r\n        animations.push([0, 0, i]);\r\n        animations.push([1, 0, array[i]]);\r\n        animations.push([1, i, array[0]]);\r\n        let temp = array[0];\r\n        array[0] = array[i];\r\n        array[i] = temp;\r\n\r\n        heapify(array, animations, i, 0);\r\n    }\r\n}\r\n\r\nfunction heapify(array, animations, n, i) {\r\n    let largest = i; // Initialize largest as root\r\n    let l = 2 * i + 1; // left = 2*i + 1\r\n    let r = 2 * i + 2; // right = 2*i + 2\r\n\r\n    // If left child is larger than root\r\n    if (l < n && array[l] > array[largest]) {\r\n        animations.push([0, largest, l]);\r\n        animations.push([0, largest, l]);\r\n        largest = l;\r\n    }\r\n\r\n    // If right child is larger than largest so far\r\n    if (r < n && array[r] > array[largest]) {\r\n        animations.push([0, largest, r]);\r\n        animations.push([0, largest, r]);\r\n        largest = r;\r\n    }\r\n\r\n    // If largest is not root\r\n    if (largest != i) {\r\n        animations.push([1, i, array[largest]]);\r\n        animations.push([1, largest, array[i]]);\r\n        let swap = array[i];\r\n        array[i] = array[largest];\r\n        array[largest] = swap;\r\n\r\n        // Recursively heapify the affected sub-tree\r\n        heapify(array, animations, n, largest);\r\n    }\r\n}\r\n\r\nfunction isEqual(array1, array2) {\r\n    if (array2.length != array1.length) {\r\n        return false;\r\n    }\r\n\r\n    for (let i = 0; i < array1.length; i++) {\r\n        if (array1[i] != array2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return true;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./SortVisualizer.css\";\r\nimport { getBubbleSortAnimation } from \"../Algorithms/BubbleSort\";\r\nimport { getSelectionSortAnimation } from \"../Algorithms/SelectionSort\";\r\nimport { getInsertionSortAnimation } from \"../Algorithms/InsertionSort\";\r\nimport { getMergeSortAnimations } from \"../Algorithms/MergeSort\";\r\nimport { getQuickSortAnimation } from \"../Algorithms/QuickSort\";\r\nimport { getHeapSortAnimations } from \"../Algorithms/HeapSort\";\r\n\r\nvar cancel = false;\r\nvar timer;\r\n\r\nclass SortVisualizer extends Component {\r\n    state = {\r\n        array: [],\r\n    };\r\n    componentDidMount() {\r\n        console.log(\"Array Generated\");\r\n        this.generateArray();\r\n    }\r\n\r\n    generateArray = () => {\r\n        const array = [];\r\n        for (var i = 0; i < 400; i++) {\r\n            array.push(this.randomIntFromInterval(10, 560));\r\n        }\r\n        this.setState({ array: array });\r\n    };\r\n\r\n    randomIntFromInterval(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1) + min);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div\r\n                    className=\"array-container\"\r\n                    style={{ textAlign: \"center\", margin: \"30px auto\" }}\r\n                >\r\n                    {this.state.array.map((value, idx) => (\r\n                        <div\r\n                            className=\"array-bar\"\r\n                            key={idx}\r\n                            style={{ height: value.toString().concat(\"px\") }}\r\n                        ></div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"navigate\" style={{ textAlign: \"center\" }}>\r\n                    <button\r\n                        className=\"btn m-2 btn-sm btn-light btn-outline-dark\"\r\n                        onClick={this.generateArray}\r\n                    >\r\n                        Generate Array\r\n                    </button>\r\n                    <button\r\n                        className=\"btn m-2 btn-sm btn-light btn-outline-dark\"\r\n                        onClick={this.bubbleSort}\r\n                    >\r\n                        Bubble Sort\r\n                    </button>\r\n                    <button\r\n                        className=\"btn m-2 btn-sm btn-light btn-outline-dark\"\r\n                        onClick={this.mergeSort}\r\n                    >\r\n                        Merge Sort\r\n                    </button>\r\n                    <button\r\n                        className=\"btn m-2 btn-sm btn-light btn-outline-dark\"\r\n                        onClick={this.insertionSort}\r\n                    >\r\n                        Insertion Sort\r\n                    </button>\r\n                    <button\r\n                        className=\"btn m-2 btn-sm btn-light btn-outline-dark\"\r\n                        onClick={this.heapSort}\r\n                    >\r\n                        Heap Sort\r\n                    </button>\r\n                    <button\r\n                        className=\"btn m-2 btn-sm btn-light btn-outline-dark\"\r\n                        onClick={this.quickSort}\r\n                    >\r\n                        Quick Sort\r\n                    </button>\r\n                    <button\r\n                        className=\"btn m-2 btn-sm btn-light btn-outline-dark\"\r\n                        onClick={this.selectionSort}\r\n                    >\r\n                        Selection Sort\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    bubbleSort = () => {\r\n        const [animations, array] = getBubbleSortAnimation(this.state.array);\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const isColorChange = i % 4 === 0 || i % 4 === 1;\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            if (isColorChange === true) {\r\n                const color = i % 4 === 0 ? \"red\" : \"turquoise\";\r\n                const [barone, bartwo] = animations[i];\r\n                const baroneStyle = arrayBars[barone].style;\r\n                const bartwoStyle = arrayBars[bartwo].style;\r\n                setTimeout(() => {\r\n                    baroneStyle.backgroundColor = color;\r\n                    bartwoStyle.backgroundColor = color;\r\n                }, i * 10);\r\n            } else {\r\n                const [barindex, newHeight] = animations[i];\r\n                if (barindex === -1) {\r\n                    continue;\r\n                }\r\n                const barStyle = arrayBars[barindex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = newHeight.toString().concat(\"px\");\r\n                }, i * 10);\r\n            }\r\n        }\r\n    };\r\n\r\n    selectionSort = () => {\r\n        const [animations, array] = getSelectionSortAnimation(this.state.array);\r\n        var c = 0;\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            if (animations[i][0] === 0) {\r\n                const color = c % 2 === 0 ? \"red\" : \"turquoise\";\r\n                c = c + 1;\r\n                const [random, barone, bartwo] = animations[i];\r\n                const baroneStyle = arrayBars[barone].style;\r\n                const bartwoStyle = arrayBars[bartwo].style;\r\n                setTimeout(() => {\r\n                    baroneStyle.backgroundColor = color;\r\n                    bartwoStyle.backgroundColor = color;\r\n                }, i * 10);\r\n            } else {\r\n                const [random, barindex, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barindex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = newHeight.toString().concat(\"px\");\r\n                }, i * 10);\r\n            }\r\n        }\r\n    };\r\n\r\n    insertionSort = () => {\r\n        const [animations, array] = getInsertionSortAnimation(this.state.array);\r\n        var c = 0;\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            if (animations[i][0] === 0) {\r\n                const color = c % 2 === 0 ? \"red\" : \"turquoise\";\r\n                c = c + 1;\r\n                const [random, barone, bartwo] = animations[i];\r\n                const baroneStyle = arrayBars[barone].style;\r\n                const bartwoStyle = arrayBars[bartwo].style;\r\n                setTimeout(() => {\r\n                    baroneStyle.backgroundColor = color;\r\n                    bartwoStyle.backgroundColor = color;\r\n                }, i * 10);\r\n            } else {\r\n                const [random, barindex, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barindex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = newHeight.toString().concat(\"px\");\r\n                }, i * 10);\r\n            }\r\n        }\r\n    };\r\n\r\n    mergeSort = () => {\r\n        const [animations, array] = getMergeSortAnimations(this.state.array);\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n        for (let i = 0; i < animations.length; i++) {\r\n            if (i % 3 == 1 || i % 3 == 0) {\r\n                const color = i % 3 == 0 ? \"red\" : \"turquoise\";\r\n                const [barone, bartwo] = animations[i];\r\n                const baroneStyle = arrayBars[barone].style;\r\n                const bartwoStyle = arrayBars[bartwo].style;\r\n                timer = setTimeout(() => {\r\n                    baroneStyle.backgroundColor = color;\r\n                    bartwoStyle.backgroundColor = color;\r\n                }, i * 10);\r\n            } else {\r\n                const [barIndex, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barIndex].style;\r\n                timer = setTimeout(() => {\r\n                    barStyle.height = newHeight.toString().concat(\"px\");\r\n                }, i * 10);\r\n            }\r\n        }\r\n    };\r\n\r\n    quickSort = () => {\r\n        const [animations, array] = getQuickSortAnimation(this.state.array);\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n        let c = 0;\r\n        for (let i = 0; i < animations.length; i++) {\r\n            if (animations[i][0] === 0) {\r\n                const color = c % 2 === 0 ? \"red\" : \"turquoise\";\r\n                c = c + 1;\r\n                const [random, barone, bartwo] = animations[i];\r\n                const baroneStyle = arrayBars[barone].style;\r\n                const bartwoStyle = arrayBars[bartwo].style;\r\n                setTimeout(() => {\r\n                    baroneStyle.backgroundColor = color;\r\n                    bartwoStyle.backgroundColor = color;\r\n                }, i * 10);\r\n            } else {\r\n                const [random, barIndex, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = newHeight.toString().concat(\"px\");\r\n                }, i * 10);\r\n            }\r\n        }\r\n    };\r\n\r\n    heapSort = () => {\r\n        const [animations, array] = getHeapSortAnimations(this.state.array);\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n        let c = 0;\r\n        for (let i = 0; i < animations.length; i++) {\r\n            if (animations[i][0] === 0) {\r\n                const color = c % 2 === 0 ? \"red\" : \"turquoise\";\r\n                c = c + 1;\r\n                const [random, barone, bartwo] = animations[i];\r\n                const baroneStyle = arrayBars[barone].style;\r\n                const bartwoStyle = arrayBars[bartwo].style;\r\n                setTimeout(() => {\r\n                    baroneStyle.backgroundColor = color;\r\n                    bartwoStyle.backgroundColor = color;\r\n                }, i * 10);\r\n            } else {\r\n                const [random, barIndex, newHeight] = animations[i];\r\n                const barStyle = arrayBars[barIndex].style;\r\n                setTimeout(() => {\r\n                    barStyle.height = newHeight.toString().concat(\"px\");\r\n                }, i * 10);\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport default SortVisualizer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport SortVisualizer from \"./SortVisualizer/SortVisualizer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <SortVisualizer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}